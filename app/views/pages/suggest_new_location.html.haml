#page_body
  .column_container
    .column.bg_vlightpurple.w_640.suggest
      %p.red.bold.p1 Suggest a New Location
      - if user_signed_in?
        %p Submit a NEW location to the map (please check first that we don't already list it). We review all location submissions.
        #location_maker
          = form_tag @region ? submitted_new_location_path : map_submitted_new_location_path, :method => 'post' do
            %form#submit_location
              %ul
                %li{:class => "first"}
                  %label{:for => "location_name"} Location Name:
                  %input{type: "text", id: "location_name", name: "location_name", params: "location_name", class: "text", required: true}
                %li
                  %label{:for => "location_street"} Street:
                  %input{:type => "text", id: "location_street", :name => "location_street", :params => "location_street", :class => "text"}
                %li{:class => "first"}
                  %label{:for => "location_city"} City:
                  %input{:type => "text", id:"location_city", :name => "location_city", :params => "location_city", :class => "text"}
                %li
                  %label{:for => "location_state"} State:
                  - if @states.size > 0
                    = select_tag :location_state, options_for_select(@states)
                  - else
                    %input{:type => "text", id:"location_state", :name => "location_state", :params => "location_state", :class => "text"}
                %li{:class => "first"}
                  %label{:for => "location_zip"} Zip:
                  %input{:type => "text",  id:"location_zip", :name => "location_zip", :params => "location_zip", :class => "text"}
                %li
                  %label{:for => "location_country"} Country:
                  = country_select('suggested_location', 'location_country', {include_blank: true}, {id:"location_country", name: 'location_country'})
                %li{:class => "first"}
                  %label{:for => "location_phone"} Phone:
                  %input{:type => "text", id:"location_phone", :name => "location_phone", :params => "location_phone", :class => "text"}
                %li
                  %label{:for => "location_website"} Website:
                  %input{:type => "text", id:"location_website", :name => "location_website", :params => "location_website", :class => "text"}
                %li{:class => "first"}
                  %label{:for => "location_type"} Location Type:
                  = select_tag :location_type, options_for_select(@location_types)
                - if @operators.size > 1
                  %li{:class => "first"}
                    %label{:for => "location_operator"} Operator:
                    = select_tag :location_operator, options_for_select(@operators)
                - if @zones.size > 1
                  %li
                    %label{:for => "location_zone"} Zone:
                    = select_tag :location_zone, options_for_select(@zones)
                .clear
                %li.textbox
                  %label{:for => "location_comments"} Comments:
                  %textarea{:type => "text", :name => "location_comments", :params => "location_comments", :class => "text", :placeholder => 'Hours; what type of payment system(s) they use (door fee, cash, cards)'}
                %li.machines_textinput
                  %label{:for => "location_type"} Machines:
                  = select_tag "location_machines", options_from_collection_for_select(Machine.all.sort_by(&:massaged_name), 'id', 'name_and_year', params["location_machines_ids"]), multiple: "multiple", :class => 'location_machines', :id => 'location_machines', name: "location_machines_ids[]", required: true
                %li.brightpurple
                  Unsure what "model" the machine is (e.g., Pro, Premium, LE, etc.)? The safest assumption is Pro (the baseline model).
                %li.submit.mt_5{:style => "clear:both;"}
                  %input{:type => "submit", :value => "Submit New Location", :class => "submit_button"}
      - else
        %p.center
          But first! We ask that you
          = link_to 'Login.', new_user_session_path, :class => "darkgrey font18 bold"
          Thank you!
:javascript

  function initialize() {
    var input = document.getElementById('location_name');
    var autocomplete = new google.maps.places.Autocomplete(input);
    google.maps.event.addListener(autocomplete, 'place_changed', function () {
        var place = autocomplete.getPlace();
        document.getElementById('location_name').value = place.name;
        if (place.website) {
          document.getElementById('location_website').value = place.website;
        }

        for (const component of place.address_components) {
          const componentType = component.types[0];

          switch (componentType) {
            case "street_number": {
              street_number = component.long_name;
              break;
            }
            case "route": {
              document.getElementById('location_street').value = street_number + " " + component.short_name;
              break;
            }
            case "locality": {
              document.getElementById('location_city').value = component.long_name;
              break;
            }
            case "administrative_area_level_1": {
              document.getElementById('location_state').value = component.short_name;
              break;
            }
            case "country": {
              if (component.short_name == 'US' && place.formatted_phone_number) {
                document.getElementById('location_phone').value = place.formatted_phone_number; 
              } else if (component.short_name != 'US' && place.international_phone_number) {
                document.getElementById('location_phone').value = place.international_phone_number; 
              }
              document.getElementById('location_country').value = component.short_name;
              break;
            }
            case "postal_code": {
              document.getElementById('location_zip').value = component.long_name;
              break;
            }

          }
        }
    });
  }
  google.maps.event.addDomListener(window, 'load', initialize);
  $(document).ready(function() {
    $('.location_machines').select2({
      placeholder: 'Select the machines at this location',
    });
  });
