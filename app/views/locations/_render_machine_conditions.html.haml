:javascript
  $('#machineconditions_container_lmx#{lmx.id}').ready(function(){
    if ('#{conditions.empty?}' == 'false'){
      $('#machineconditions_container_lmx_#{lmx.id}').css('display', 'block');
    }else{
      $('#machineconditions_container_lmx_#{lmx.id}').css('display', 'none');
    }
  });

%div.center.red.font16.pb_10.italic Machine comments may not reflect current conditions!

- conditions.each do |mcx|
  %div{:id => "container_past_machine_condition_#{mcx.id}"}
    %div.machine_condition_new_line{:id => "editing_past_machine_condition_#{mcx.id}", :style=>"display:none;"}
      = form_tag machine_condition_path(id: mcx.id), :id => "update_condition_#{mcx.id}", :method => 'put' do
        = text_area_tag 'comment', "#{mcx.comment}", :cols => 20, :rows => 3, :class => 'edit_mode'
        .clear
        = submit_tag 'Update Comment', :class => 'update_condition_submit'
        %a.button{:id => "cancel_update_condition_#{mcx.id}"} Cancel Update
    %div.machine_condition_new_line{:id => "showing_past_machine_condition_#{mcx.id}"}
      %span.machine_condition= "#{mcx.comment}"
      .clear
      %div.machine_condition_author
        - if mcx.user
          = link_to mcx.user.username, "#{request.scheme}://#{request.host_with_port}/users/#{mcx.user.username}/profile", :class => 'bold'
          - if !mcx.user.flag.blank?
            =image_tag("https://flagcdn.com/24x18/#{mcx.user.flag}.png", :class => "user_flag", :alt => "#{mcx.user.flag} flag")
          - if !mcx.user.admin_title.blank? || !mcx.user.contributor_rank.blank?
            - rank = mcx.user.admin_title.present? ? mcx.user.admin_title.gsub(' ', '') : mcx.user.contributor_rank.gsub(' ', '')
            %span{:class => "rank_icon_#{rank} rank_icon_past_comment"}
              =image_tag("rank/#{rank}.png", :class => "rank_icon")

        - else
          DELETED USER
        - if !mcx.updated_at.nil?
          %span.machine_condition_date= mcx.updated_at.strftime("%b %d, %Y")
          - if mcx.updated_at != mcx.created_at
            %span.comment_edited_asterisk *
            %span.comment_edited_tooltip
              Comment has been edited
        - if current_user && (mcx.user_id == current_user.id)
          %a.ml_8.update_condition_button.button{:id => "edit_condition_#{mcx.id}"} edit
          = form_tag machine_condition_path(id: mcx.id), :id => "remove_condition_#{mcx.id}", :method => 'delete' do
            = submit_tag 'delete', :class => 'delete_condition_button'

        :javascript
          $('#cancel_update_condition_#{mcx.id}').click(function () {
            $('#editing_past_machine_condition_#{mcx.id}').css('display', 'none')
            $('#showing_past_machine_condition_#{mcx.id}').css('display', 'block')

            return false;
            });
          $('#edit_condition_#{mcx.id}').click(function () {
            $('#editing_past_machine_condition_#{mcx.id}').css('display', 'block')
            $('#showing_past_machine_condition_#{mcx.id}').css('display', 'none')

            return false;
            });
          $('#update_condition_#{mcx.id}').submit(function () {
              var form = $(this);
              if (confirm("Update this comment?")) {
                $.post(form.attr('action'), form.serialize(), function (data) {
                  $('#editing_past_machine_condition_#{mcx.id}').css('display', 'none');
                  $('#showing_past_machine_condition_#{mcx.id}').css('display', 'block');
                  $('#show_conditions_lmx_#{lmx.id}').load('/location_machine_xrefs/#{lmx.id}/render_machine_conditions');
                });
              }

              return false;
            });
          $('#remove_condition_#{mcx.id}').submit(function () {
              var form = $(this);
              if (confirm("Remove this comment?")) {
                $('#showing_past_machine_condition_#{mcx.id}').fadeOut('slow', function() {
                  $.post(form.attr('action'), form.serialize(), function (data) {});
                });
              }

              return false;
            });
